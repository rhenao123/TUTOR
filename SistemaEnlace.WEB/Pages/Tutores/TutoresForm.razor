@using SistemaEnlace.Shared.Entities
@using SistemaEnlace.WEB.Shared
@using SistemaEnlace.WEB.Repositories
@inject SweetAlertService sweetAlertService
@inject IRepository repository

<EditForm Model="tutor" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label for="cedula">Cédula: </label>
        <div>
            <InputNumber id="cedula" @bind-Value="tutor.id" />
            <ValidationMessage For="@(() => tutor.id)" />
        </div>
    </div>

    <div class="mb-3">
        <label for="nombre">Nombre: </label>
        <div>
            <InputText id="nombre" @bind-Value="tutor.Nombre" placeholder="Nombre" />
            <ValidationMessage For="@(() => tutor.Nombre)" />
        </div>
    </div>

    <div class="mb-3">
        <label for="apellido">Apellido: </label>
        <div>
            <InputText id="apellido" @bind-Value="tutor.Apellidos" placeholder="Apellido" />
            <ValidationMessage For="@(() => tutor.Apellidos)" />
        </div>
    </div>


    <div class="mb-3">
        <label for="ubicacion">Ubicación: </label>
        <div>
            <InputText id="ubicacion" @bind-Value="tutor.Ubicacion" placeholder="Ubicación" />
            <ValidationMessage For="@(() => tutor.Ubicacion)" />
        </div>
    </div>

    <div class="mb-3">
        <label for="correo">Correo: </label>
        <div>
            <InputText id="correo" @bind-Value="tutor.correo" placeholder="Correo" />
            <ValidationMessage For="@(() => tutor.correo)" />
        </div>
    </div>

    <div class="mb-3">
        <label for="experiencia">Experiencia: </label>
        <div>
            <InputNumber id="experiencia" @bind-Value="tutor.Experiencia" placeholder="Experiencia" />
            <ValidationMessage For="@(() => tutor.Experiencia)" />
        </div>
    </div>

    <div class="mb-3">
        <label for="edad">Edad: </label>
        <div>
            <InputNumber id="edad" @bind-Value="tutor.Edad" placeholder="Edad" />
            <ValidationMessage For="@(() => tutor.Edad)" />
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>
    <button class="btn btn-success" type="button" @onclick="HandleReturnAction">Regresar</button>
    <button class="btn btn-info" type="reset"><i class="bi bi-x-circle" /> Limpiar</button>
</EditForm>

@code {
    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new EditContext(tutor);
    }

    [EditorRequired]
    [Parameter]
    public Tutor tutor { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormularioPosteadoConExito { get; set; } = false;

    private async Task HandleSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(null);
        }
    }

    private async Task HandleReturnAction()
    {
        if (ReturnAction.HasDelegate)
        {
            await ReturnAction.InvokeAsync(null);
        }
    }
}
