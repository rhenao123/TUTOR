@page "/Tutores"
@using SistemaEnlace.Shared.Entities
@using SistemaEnlace.WEB.Repositories
@using SistemaEnlace.WEB.Shared
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject IRepository repository

<div class="container mt-4">
    <div class="card">
        <div class="card-header" style="background-color: #f2f2f2;">
            <h1 class="mb-0" style="outline: none;">Tutores</h1>
        </div>
        <div class="card-body">
            <div class="mb-3 text-end">
                <a class="btn btn-primary" href="/Tutores/create">
                    <i class="bi bi-plus-circle"></i> Nuevo Registro
                </a>
            </div>
            <GenericList MyList="tutores">
                <Body>
                    <div class="table-responsive">
                        <table class="table table-striped table-hover align-middle">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Nombre</th>
                                    <th>Apellido</th>
                                    <th>Edad</th>
                                    <th>Fecha de Nacimiento</th>
                                    <th>Ubicación</th>
                                    <th>Correo</th>
                                    <th>Experiencia</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in tutores!)
                                {
                                    <tr>
                                        <td>@item.id</td>
                                        <td>@item.Nombre</td>
                                        <td>@item.Apellidos</td>
                                        <td>@item.Edad</td>
                                        <td>@item.Ubicacion</td>
                                        <td>@item.correo</td>
                                        <td>@item.Experiencia</td>
                                        <td>
                                            <a href="/Tutores/editar/@item.id" class="btn btn-warning me-2">
                                                <i class="bi bi-pencil-square"></i> Editar
                                            </a>
                                            <button @onclick=@(() => ConfirmarEliminacion(item)) class="btn btn-danger">
                                                <i class="bi bi-trash-fill"></i> Borrar
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </Body>
            </GenericList>
        </div>
    </div>
</div>

@code {
    public List<Tutor> tutores { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<List<Tutor>>("/api/Tutor");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        tutores = responseHttp.Response;
    }

    private async Task ConfirmarEliminacion(Tutor tutor)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmar Eliminación",
                Text = $"¿Estás seguro de querer borrar el registro de {tutor.Nombre}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, borrar",
                CancelButtonText = "No, cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await DeleteAsync(tutor);
        }
    }

    private async Task DeleteAsync(Tutor tutor)
    {
        var responseHttp = await repository.DeleteAsync<Tutor>($"/api/Tutor/{tutor.id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("Tutores");
            }
            else
            {
                var mensajeError = await responseHttp.GetErrorMessage();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            return;
        }

        await LoadAsync();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = false,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }
}
