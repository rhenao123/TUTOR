@using SistemaEnlace.Shared.Entities
@using SistemaEnlace.WEB.Shared
@using SistemaEnlace.WEB.Repositories
@inject SweetAlertService sweetAlertService
@inject IRepository repository

<EditForm Model="conversacion" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    
    @* <div class="mb-3">
        <label for="id">ID: </label>
        <div>
            <InputNumber id="id" @bind-Value="conversacion.Id" />
            <ValidationMessage For="@(() => conversacion.Id)" />
        </div>
    </div>
 *@
    <div class="mb-3">
        <label for="fecha">Fecha: </label>
        <div>
            <InputDate id="fecha" @bind-Value="conversacion.Fecha" placeholder="Fecha" />
            <ValidationMessage For="@(() => conversacion.Fecha)" />
        </div>
    </div>

    <div class="mb-3">
        <label for="jovenVulnerableid">ID Joven Vulnerable: </label>
        <div>
            <InputNumber id="jovenVulnerableid" @bind-Value="conversacion.JovenVulnerableid" placeholder="ID Joven Vulnerable" />
            <ValidationMessage For="@(() => conversacion.JovenVulnerableid)" />
        </div>
    </div>

    <div class="mb-3">
        <label for="tutorid">ID Tutor: </label>
        <div>
            <InputNumber id="tutorid" @bind-Value="conversacion.Tutorid" placeholder="ID Tutor" />
            <ValidationMessage For="@(() => conversacion.Tutorid)" />
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>
    <button class="btn btn-success" type="button" @onclick="HandleReturnAction">Regresar</button>
    <button class="btn btn-info" type="reset"><i class="bi bi-x-circle" /> Limpiar</button>
</EditForm>

@code {
    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new EditContext(conversacion);
    }

    [EditorRequired]
    [Parameter]
    public Conversacion conversacion { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormularioPosteadoConExito { get; set; } = false;

    private async Task HandleSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(null);
        }
    }

    private async Task HandleReturnAction()
    {
        if (ReturnAction.HasDelegate)
        {
            await ReturnAction.InvokeAsync(null);
        }
    }
}
