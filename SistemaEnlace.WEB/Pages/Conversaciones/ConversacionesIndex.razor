@page "/Conversaciones"
@using SistemaEnlace.Shared.Entities
@using SistemaEnlace.WEB.Repositories
@using SistemaEnlace.WEB.Shared
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject IRepository repository

<div class="container mt-4">
    <div class="card">
        <div class="card-header" style="background-color: #f2f2f2;">

            <h1 class="mb-0" style="outline: none;">Conversaciones</h1>
        </div>
        <div class="card-body">
            <div class="mb-3 text-end">

                <a class="btn btn-primary" href="/Conversaciones/create">
                    <i class="bi bi-plus-circle"></i> Nueva Conversación
                </a>
            </div>
            <GenericList MyList="conversaciones">
                <Body>
                    <div class="table-responsive">
                        <table class="table table-striped table-hover align-middle">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Fecha</th>
                                    <th>ID Joven Vulnerable</th>
                                    <th>ID Tutor</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in conversaciones!)
                                {
                                    <tr>
                                        <td>@item.Id</td>
                                        <td>@item.Fecha</td>
                                        <td>@item.JovenVulnerableid</td>
                                        <td>@item.Tutorid</td>
                                        <td>

                                            <a href="/Conversaciones/editar/@item.Id" class="btn btn-warning me-2">
                                                <i class="bi bi-pencil-square"></i> Editar
                                            </a>
                                            <button @onclick=@(() => ConfirmarEliminacion(item)) class="btn btn-danger">
                                                <i class="bi bi-trash-fill"></i> Borrar
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </Body>
            </GenericList>
        </div>
    </div>
</div>

@code {
    public List<Conversacion> conversaciones { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<List<Conversacion>>("/api/Conversaciones");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        conversaciones = responseHttp.Response;
    }

    private async Task ConfirmarEliminacion(Conversacion conversacion)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmar Eliminación",
                Text = $"¿Estás seguro de querer borrar el registro de la conversación con ID {conversacion.Id}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, borrar",
                CancelButtonText = "No, cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await DeleteAsync(conversacion);
        }
    }

    private async Task DeleteAsync(Conversacion conversacion)
    {
        var responseHttp = await repository.DeleteAsync<Conversacion>($"/api/Conversaciones/{conversacion.Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/Conversaciones");
            }
            else
            {
                var mensajeError = await responseHttp.GetErrorMessage();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            return;
        }

        await LoadAsync();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = false,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }
}
