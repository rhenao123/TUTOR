﻿

@page "/Supervisores/editar/{id:int}"
@using System.Net
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService


@attribute [Authorize(Roles = "Admin")]
<h3>Editar</h3>

@if (supervisores is null)
{
    <p>Cargando...</p>
}
else
{
    <SupervisoresForm supervisor="supervisores" OnSubmit="ConfirmarEdicion" ReturnAction="Return" />
}

@code {
    [Parameter]
    public int id { get; set; }
    private Supervisor supervisores;

    

    protected override async Task OnParametersSetAsync()
    {
        var responseHttp = await repository.GetAsync<Supervisor>($"/api/Supervisor/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/Supervisores");
            }
            else
            {
                var messsage = await responseHttp.GetErrorMessage();
                await sweetAlertService.FireAsync("Error", messsage, SweetAlertIcon.Error);
            }
        }
        else
        {
            supervisores = responseHttp.Response;
        }
    }
    private async Task ConfirmarEdicion()
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmar Edición",
                Text = "¿Deseas guardar los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, guardar",
                CancelButtonText = "No, cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Editar();
        }
    }

    private async Task Editar()
    {
        var responseHttp = await repository.PutAsync("/api/Supervisor", supervisores);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message);
            return;
        }

        Return();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Cambios guardados con éxito.");
    }

    private void Return()
    {
        navigationManager.NavigateTo("/Supervisores");
    }

}