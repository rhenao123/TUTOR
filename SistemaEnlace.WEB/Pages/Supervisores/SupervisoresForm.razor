@using SistemaEnlace.Shared.Entities
@using SistemaEnlace.WEB.Shared
@using SistemaEnlace.WEB.Repositories
@inject SweetAlertService sweetAlertService
@inject IRepository repository

<EditForm Model="supervisor" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label for="cedula">Cédula: </label>
        <div>
            <InputNumber id="cedula" @bind-Value="supervisor.id" />
            <ValidationMessage For="@(() => supervisor.id)" />
        </div>
    </div>

    <div class="mb-3">
        <label for="nombre">Nombre: </label>
        <div>
            <InputText id="nombre" @bind-Value="supervisor.Nombre" placeholder="Nombre" />
            <ValidationMessage For="@(() => supervisor.Nombre)" />
        </div>
    </div>

    <div class="mb-3">
        <label for="telefono">Teléfono: </label>
        <div>
            <InputText id="telefono" @bind-Value="supervisor.Telefono" placeholder="Teléfono" />
            <ValidationMessage For="@(() => supervisor.Telefono)" />
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>
    <button class="btn btn-success" type="button" @onclick="HandleReturnAction">Regresar</button>
    <button class="btn btn-info" type="reset"><i class="bi bi-x-circle" /> Limpiar</button>
</EditForm>

@code {
    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new EditContext(supervisor);
    }

    [EditorRequired]
    [Parameter]
    public Supervisor supervisor { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormularioPosteadoConExito { get; set; } = false;

    private async Task HandleSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(null);
        }
    }

    private async Task HandleReturnAction()
    {
        if (ReturnAction.HasDelegate)
        {
            await ReturnAction.InvokeAsync(null);
        }
    }
}
